(function() {
  let c, n = {
    theme: "chrome",
    fontSize: 14,
    // in px
    wrap: !0,
    icon: void 0,
    // auto set during config
    iconName: "sourcecode",
    autocomplete: !1,
    language: "html"
  };
  const f = (e) => {
    const o = e.getParam("supercode_theme");
    o && typeof o == "string" && (n.theme = o);
    const s = e.getParam("supercode_font_size");
    typeof s == "number" && s > 0 && (n.fontSize = parseInt(s));
    const a = e.getParam("supercode_wrap");
    typeof a == "boolean" && (n.wrap = a);
    const i = e.getParam("supercode_autocomplete");
    typeof i == "boolean" && (n.autocomplete = i);
    const r = e.getParam("supercode_icon");
    if (r && typeof r == "string" && (n.iconName = r), n.icon = e.ui.registry.getAll().icons[n.iconName], !n.icon)
      throw new Error("Supercode Icon name is invalid");
  }, g = () => {
    const e = [
      "https://cdnjs.cloudflare.com/ajax/libs/ace/1.9.6/ace.js",
      "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.15.1/beautify-html.min.js"
    ];
    n.autocomplete && e.push("https://cdnjs.cloudflare.com/ajax/libs/ace/1.9.6/ext-language_tools.min.js"), e.forEach((o) => {
      let s = document.createElement("script");
      s.src = o, s.type = "text/javascript", document.body.appendChild(s);
    });
  }, h = (e) => {
    e.attachShadow({ mode: "open" }), e.shadowRoot.innerHTML = '<div class="supercode-editor" style="width: 100%; height: 100%; position: absolute; left:0; top:0"></div>';
    const o = e.shadowRoot.querySelector(".supercode-editor");
    o.style.width = "100%", o.style.height = "100%", c = ace.edit(o), c.renderer.attachToShadowRoot(), n.autocomplete && c.setOptions({
      enableLiveAutocompletion: !0
    }), c.setTheme(`ace/theme/${n.theme}`), c.setFontSize(n.fontSize), c.setShowPrintMargin(!1);
  }, y = (e, o, s) => {
    const a = o.cloneNode(!0);
    a.style.position = "relative";
    const i = a.querySelector(".tox-menubar");
    i && (i.innerHTML = `
                <b style='font-size: 14px; font-weight: bold; padding: 9px;'>Source Code Editor</b>
            `);
    let r = !0;
    if (a.querySelectorAll(".tox-tbtn, .tox-split-button").forEach((t) => {
      if (t.getAttribute("data-mce-name") != "supercode") {
        if (t.getAttribute("data-mce-name") === "overflow-button") {
          t.style.display = "none", t.removeAttribute("data-mce-name");
          return;
        }
        t.classList.remove("tox-tbtn--enabled"), t.classList.add("tox-tbtn--disabled"), t.removeAttribute("data-mce-name");
      } else
        r = !1, t.setAttribute("data-mce-name", "supercode-toggle"), t.classList.add("tox-tbtn--enabled"), t.onclick = s;
    }), r) {
      const t = document.createElement("div");
      t.classList = "tox-toolbar__group", t.style.position = "absolute", t.style.right = 0, t.style.height = "100%";
      const d = document.createElement("button");
      d.classList = "tox-tbtn tox-tbtn--enabled", d.innerHTML = `<span class="tox-icon tox-tbtn__icon-wrap">${n.icon}</span>`, d.onclick = s, t.append(d), a.append(t);
    }
    e.append(a);
  }, b = (e, o) => {
    e.style.width = o + "px", e.style.height = "100%", e.style.position = "relative", h(e);
  }, S = (e) => e.getParam("inline") !== !0, w = function(e) {
    if (!S(e))
      return console.error("Supercode Plugin is not supported in inline mode"), !1;
    let o = 0, s, a = !0, i;
    f(e), g();
    const r = () => {
      e.focus(), e.undoManager.transact(function() {
        e.setContent(c.getValue());
      }), e.selection.setCursorLocation(), e.nodeChanged(), e.execCommand("ToggleView", !1, "supercode");
    }, t = (l) => {
      (l.key === " " && l.ctrlKey || l.key === "Escape") && r();
    }, d = {
      onShow: (l) => {
        const u = l.getContainer();
        u.style.padding = 0, (a || u.childElementCount === 0) && (u.innerHTML = '<div class="supercode-header"></div><div class="supercode-body no-tox-style" id="no-tox-style"></div>', u.addEventListener("keydown", t), y(u.querySelector(".supercode-header"), s, r), b(u.querySelector(".supercode-body "), o));
        let m = html_beautify(e.getContent());
        i || (i = ace.createEditSession(m, `ace/mode/${n.language}`), i.setUseWrapMode(n.wrap), c.setSession(i)), i.setValue(m), c.gotoLine(1 / 0), c.focus();
      },
      onHide: () => {
        removeEventListener("keydown", t);
      }
    }, p = function() {
      const l = e.getContainer();
      a = o != l.clientWidth, o = l.clientWidth, (a || !s) && (s = l.querySelector(".tox-editor-header")), e.execCommand("ToggleView", !1, "supercode");
    };
    return e.ui.registry.addView("supercode", d), e.ui.registry.addButton("supercode", {
      icon: n.iconName,
      tooltip: "Source Code Editor (Ctrl + space)",
      onAction: p
    }), e.shortcuts.add("ctrl+32", "Toggles Source Code Editing Mode", p), {
      getMetadata: function() {
        return {
          name: "Source Code Editor",
          url: ""
        };
      }
    };
  };
  tinymce.PluginManager.add("supercode", w);
})();
