(function() {
  let i;
  const S = (n) => {
    const c = {
      "ace-default": {
        url: "https://cdnjs.cloudflare.com/ajax/libs/ace/1.9.6/ace.js",
        loaded: !1,
        required: !0
      },
      "beautify-html": {
        url: "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.15.1/beautify-html.min.js",
        loaded: !1,
        required: !0
      },
      "ace-autocomplete": {
        url: "https://cdnjs.cloudflare.com/ajax/libs/ace/1.9.6/ext-language_tools.min.js",
        loaded: !1,
        required: !1
      }
    };
    n.autocomplete && (c["ace-autocomplete"].required = !0), Object.values(c).forEach((l) => {
      if (l.loaded)
        return;
      let d = document.createElement("script");
      d.src = l.url, d.type = "text/javascript", document.body.appendChild(d);
    });
  }, w = (n) => n.getParam("inline") !== !0, x = function(n) {
    if (!w(n))
      return console.error("Supercode Plugin is not supported in inline mode"), !1;
    let c = 0, l, d = !1, u, t = {
      theme: "chrome",
      fontSize: 14,
      // in px
      wrap: !0,
      icon: void 0,
      // auto set during config
      iconName: "sourcecode",
      autocomplete: !1,
      language: "html",
      renderer: null,
      parser: null,
      shortcut: !0,
      aceCss: null,
      fontFamily: null
    };
    const C = (e) => {
      const o = e.getParam("supercode");
      if (o && typeof o == "object") {
        for (const r in o)
          if (o.hasOwnProperty(r)) {
            const s = o[r];
            switch (r) {
              case "theme":
              case "language":
              case "iconName":
              case "aceCss":
              case "fontFamily":
                typeof s == "string" && (t[r] = s);
                break;
              case "fontSize":
                typeof s == "number" && s > 0 && (t.fontSize = parseInt(s));
                break;
              case "wrap":
              case "autocomplete":
              case "shortcut":
                typeof s == "boolean" && (t[r] = s);
                break;
              case "parser":
              case "renderer":
                typeof s == "function" && (t[r] = s);
                break;
            }
          }
      }
      if (t.icon = e.ui.registry.getAll().icons[t.iconName], !t.icon)
        throw new Error("Supercode Icon name is invalid");
    }, E = (e) => {
      if (e.attachShadow({ mode: "open" }), t.aceCss) {
        const s = new CSSStyleSheet();
        s.replaceSync(t.aceCss), e.shadowRoot.adoptedStyleSheets.push(s);
      }
      e.shadowRoot.innerHTML = `
            <div class="supercode-editor" style="width: 100%; height: 100%; position: absolute; left:0; top:0"></div>`;
      const o = e.shadowRoot.querySelector(".supercode-editor");
      o.style.width = "100%", o.style.height = "100%", i = ace.edit(o), i.renderer.attachToShadowRoot();
      const r = {};
      t.autocomplete && (r.enableLiveAutocompletion = !0), t.fontFamily && (r.fontFamily = t.fontFamily), i.setOptions(r), i.setTheme(`ace/theme/${t.theme}`), i.setFontSize(t.fontSize), i.setShowPrintMargin(!1);
    }, m = (e, o, r) => {
      const s = o.cloneNode(!0);
      s.style.position = "relative";
      const g = s.querySelector(".tox-menubar");
      g && (g.innerHTML = "<b style='font-size: 14px; font-weight: bold; padding: 9px;'>Source Code Editor</b>");
      let b = !0;
      if (s.querySelectorAll(".tox-tbtn, .tox-split-button").forEach((a) => {
        if (a.getAttribute("data-mce-name") != "supercode") {
          if (a.getAttribute("data-mce-name") === "overflow-button") {
            a.style.display = "none", a.removeAttribute("data-mce-name");
            return;
          }
          a.classList.remove("tox-tbtn--enabled"), a.classList.add("tox-tbtn--disabled"), a.removeAttribute("data-mce-name");
        } else
          b = !1, a.setAttribute("data-mce-name", "supercode-toggle"), a.classList.add("tox-tbtn--enabled"), a.onclick = r;
      }), b) {
        const a = document.createElement("div");
        a.classList = "tox-toolbar__group", a.style.position = "absolute", a.style.right = 0, a.style.height = "100%";
        const p = document.createElement("button");
        p.classList = "tox-tbtn tox-tbtn--enabled", p.innerHTML = `<span class="tox-icon tox-tbtn__icon-wrap">${t.icon}</span>`, p.onclick = r, a.append(p), s.append(a);
      }
      e.innerHTML = "", e.append(s);
    }, v = (e, o) => {
      e.style.width = o + "px", e.style.height = "100%", e.style.position = "relative", E(e);
    };
    C(n), S(t);
    const f = () => {
      n.focus(), n.undoManager.transact(function() {
        let e = i.getValue();
        t.renderer && (e = t.renderer(e)), n.setContent(e);
      }), n.selection.setCursorLocation(), n.nodeChanged(), n.execCommand("ToggleView", !1, "supercode");
    }, h = (e) => {
      (e.key === " " && e.ctrlKey || e.key === "Escape") && f();
    }, L = (e) => t.parser ? t.parser(e) : html_beautify(e), j = {
      onShow: (e) => {
        const o = e.getContainer();
        d && (m(o.querySelector(".supercode-header"), l, f), o.querySelector(".supercode-body ").style.width = c + "px"), o.childElementCount === 0 && (o.style.padding = 0, o.style.display = "flex", o.style.flexDirection = "column", o.innerHTML = '<div class="supercode-header"></div><div class="supercode-body"></div>', t.shortcut && o.addEventListener("keydown", h), m(o.querySelector(".supercode-header"), l, f), v(o.querySelector(".supercode-body "), c));
        let r = L(n.getContent());
        u || (u = ace.createEditSession(r, `ace/mode/${t.language}`), u.setUseWrapMode(t.wrap), i.setSession(u)), u.setValue(r), i.gotoLine(1 / 0), i.focus();
      },
      onHide: () => {
        t.shortcut && removeEventListener("keydown", h);
      }
    }, y = function() {
      const e = n.getContainer();
      c && (d = c != e.clientWidth), c = e.clientWidth, (d || !l) && (l = e.querySelector(".tox-editor-header")), n.execCommand("ToggleView", !1, "supercode");
    };
    return n.ui.registry.addView("supercode", j), n.ui.registry.addButton("supercode", {
      icon: t.iconName,
      tooltip: "Source Code Editor (Ctrl + space)",
      onAction: y
    }), t.shortcut && n.shortcuts.add("ctrl+32", "Toggles Source Code Editing Mode", y), {
      getMetadata: function() {
        return {
          name: "Supercode",
          url: "https://github.com/prathamVaidya/supercode-tinymce-plugin"
        };
      }
    };
  };
  tinymce.PluginManager.add("supercode", x);
})();
